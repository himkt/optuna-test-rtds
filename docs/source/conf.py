# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))

from typing import Any
from typing import List
from io import BytesIO
import os
import pkg_resources
import subprocess
import time
from zipfile import ZipFile

import plotly.io as pio
import requests
from sphinx_gallery.sorting import FileNameSortKey


__version__ = pkg_resources.get_distribution("optuna").version


# Note: GITHUB_TOKEN is set on readthedocs, which is used to fetch artifacts from GitHub.
github_token = os.getenv("GITHUB_TOKEN")
if github_token is not None:

    def get_commit_id() -> str:
        output = subprocess.check_output(["git", "rev-parse", "HEAD"])
        return output.strip().decode("ascii")

    def retrieve_artifacts() -> List[Any]:
        return requests.get(
            "https://api.github.com/repos/optuna/optuna/actions/artifacts",
            params=dict(per_page=20),
        ).json()["artifacts"]

    def search_artifact(artifacts: Any, hash: str) -> str:
        target_name = f"artifacts-{hash}"
        artifact_names = [a["name"] for a in artifacts]

        for artifact in artifacts:
            if artifact["name"] == target_name:
                return artifact["archive_download_url"]
        raise RuntimeError(f"Not found {target_name} on {artifact_names}")

    def download_artifact() -> None:
        artifacts = retrieve_artifacts()
        target_artifact_url = search_artifact(artifacts, commit_id)
        artifact = requests.get(
            target_artifact_url,
            headers={"Authorization": f"token {github_token}"},
        )
        print(f"{target_artifact_url}: artifact")

        if artifact.status_code != 200:
            raise RuntimeError(f"Invalid status code {artifact.status_code}")

        print("Succeeded to fetch request")
        with ZipFile(BytesIO(artifact.content)) as f:
            path = "tutorial"
            f.extractall(path=path)
            print(f"Extracted to {path}")

    num_retries = 3
    sleep_interval = 30

    commit_id = get_commit_id()
    for _ in range(num_retries):
        try:
            download_artifact()
            break
        except Exception as e:
            print("Error: ", e)
            print(f"Retry after {sleep_interval} sec...")
            time.sleep(sleep_interval)

# -- Project information -----------------------------------------------------

project = "Optuna"
copyright = "2018, Optuna Contributors."
author = "Optuna Contributors."

# The short X.Y version
version = __version__
# The full version, including alpha/beta/rc tags
release = __version__

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.doctest",
    "sphinx.ext.imgconverter",
    "sphinx.ext.intersphinx",
    "sphinx.ext.mathjax",
    "sphinx.ext.napoleon",
    "sphinx.ext.viewcode",
    "sphinx.ext.githubpages",
    "cliff.sphinxext",
    "sphinx_copybutton",
    "sphinx_gallery.gen_gallery",
    "matplotlib.sphinxext.plot_directive",
    "sphinx_plotly_directive",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {"logo_only": True, "navigation_with_keys": True}

html_favicon = "../image/favicon.ico"

html_logo = "../image/optuna-logo.png"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]
html_css_files = ["css/custom.css"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "Optunadoc"

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, "Optuna.tex", "Optuna Documentation", "Optuna Contributors.", "manual"),
]

# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "optuna", "Optuna Documentation", [author], 1)]

# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "Optuna",
        "Optuna Documentation",
        author,
        "Optuna",
        "One line description of project.",
        "Miscellaneous",
    ),
]

intersphinx_mapping = {"python": ("https://docs.python.org/3", None)}

# -- Extension configuration -------------------------------------------------
autosummary_generate = True
autodoc_typehints = "description"
autodoc_default_options = {
    "members": True,
    "inherited-members": True,
    "exclude-members": "with_traceback",
}

# Sphinx Gallery
pio.renderers.default = "sphinx_gallery"

sphinx_gallery_conf = {
    "examples_dirs": [
        "../../tutorial",
    ],
    "gallery_dirs": [
        "tutorial",
    ],
    "within_subsection_order": FileNameSortKey,
    "filename_pattern": r"/*\.py",
    "first_notebook_cell": None,
}

# matplotlib plot directive
plot_include_source = True
plot_formats = [("png", 90)]
plot_html_show_formats = False
plot_html_show_source_link = False

# sphinx plotly directive
plotly_include_source = True
plotly_formats = ["html"]
plotly_html_show_formats = False
plotly_html_show_source_link = False
